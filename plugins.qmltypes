import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable wangwenx190.QuickMpv 1.0'

Module {
    dependencies: ["QtQuick 2.13"]
    Component {
        name: "MpvDeclarativeObject"
        defaultProperty: "data"
        prototype: "QQuickFramebufferObject"
        exports: ["wangwenx190.QuickMpv/MpvObject 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PlaybackState"
            values: {
                "StoppedState": 0,
                "PlayingState": 1,
                "PausedState": 2
            }
        }
        Enum {
            name: "MediaStatus"
            values: {
                "UnknownMediaStatus": 0,
                "NoMedia": 1,
                "LoadingMedia": 2,
                "LoadedMedia": 3,
                "StalledMedia": 4,
                "BufferingMedia": 5,
                "BufferedMedia": 6,
                "EndOfMedia": 7,
                "InvalidMedia": 8
            }
        }
        Enum {
            name: "LogLevel"
            values: {
                "NoLog": 0,
                "DebugLevel": 1,
                "WarningLevel": 2,
                "CriticalLevel": 3,
                "FatalLevel": 4,
                "InfoLevel": 5
            }
        }
        Enum {
            name: "MpvCallType"
            values: {
                "SynchronousCall": 0,
                "AsynchronousCall": 1
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "videoSize"; type: "QSize"; isReadonly: true }
        Property { name: "duration"; type: "qlonglong"; isReadonly: true }
        Property { name: "position"; type: "qlonglong" }
        Property { name: "volume"; type: "int" }
        Property { name: "mute"; type: "bool" }
        Property { name: "seekable"; type: "bool"; isReadonly: true }
        Property { name: "playbackState"; type: "MpvDeclarativeObject::PlaybackState" }
        Property { name: "mediaStatus"; type: "MpvDeclarativeObject::MediaStatus"; isReadonly: true }
        Property { name: "logLevel"; type: "MpvDeclarativeObject::LogLevel" }
        Property { name: "hwdec"; type: "string" }
        Property { name: "mpvVersion"; type: "string"; isReadonly: true }
        Property { name: "mpvConfiguration"; type: "string"; isReadonly: true }
        Property { name: "ffmpegVersion"; type: "string"; isReadonly: true }
        Property { name: "qtVersion"; type: "string"; isReadonly: true }
        Property { name: "vid"; type: "int" }
        Property { name: "aid"; type: "int" }
        Property { name: "sid"; type: "int" }
        Property { name: "videoRotate"; type: "int" }
        Property { name: "videoAspect"; type: "double" }
        Property { name: "speed"; type: "double" }
        Property { name: "deinterlace"; type: "bool" }
        Property { name: "audioExclusive"; type: "bool" }
        Property { name: "audioFileAuto"; type: "string" }
        Property { name: "subAuto"; type: "string" }
        Property { name: "subCodepage"; type: "string" }
        Property { name: "fileName"; type: "string"; isReadonly: true }
        Property { name: "mediaTitle"; type: "string"; isReadonly: true }
        Property { name: "vo"; type: "string" }
        Property { name: "ao"; type: "string" }
        Property { name: "screenshotFormat"; type: "string" }
        Property { name: "screenshotPngCompression"; type: "int" }
        Property { name: "screenshotTemplate"; type: "string" }
        Property { name: "screenshotDirectory"; type: "string" }
        Property { name: "profile"; type: "string" }
        Property { name: "hrSeek"; type: "bool" }
        Property { name: "ytdl"; type: "bool" }
        Property { name: "loadScripts"; type: "bool" }
        Property { name: "path"; type: "string"; isReadonly: true }
        Property { name: "fileFormat"; type: "string"; isReadonly: true }
        Property { name: "fileSize"; type: "qlonglong"; isReadonly: true }
        Property { name: "videoBitrate"; type: "double"; isReadonly: true }
        Property { name: "audioBitrate"; type: "double"; isReadonly: true }
        Property {
            name: "audioDeviceList"
            type: "MpvDeclarativeObject::AudioDevices"
            isReadonly: true
        }
        Property { name: "screenshotTagColorspace"; type: "bool" }
        Property { name: "screenshotJpegQuality"; type: "int" }
        Property { name: "videoFormat"; type: "string"; isReadonly: true }
        Property { name: "mpvCallType"; type: "MpvDeclarativeObject::MpvCallType" }
        Property { name: "mediaTracks"; type: "MpvDeclarativeObject::MediaTracks"; isReadonly: true }
        Property { name: "videoSuffixes"; type: "QStringList"; isReadonly: true }
        Property { name: "audioSuffixes"; type: "QStringList"; isReadonly: true }
        Property { name: "subtitleSuffixes"; type: "QStringList"; isReadonly: true }
        Property { name: "chapters"; type: "MpvDeclarativeObject::Chapters"; isReadonly: true }
        Property { name: "metadata"; type: "MpvDeclarativeObject::Metadata"; isReadonly: true }
        Property { name: "avsync"; type: "double"; isReadonly: true }
        Property { name: "percentPos"; type: "int" }
        Property { name: "estimatedVfFps"; type: "double"; isReadonly: true }
        Signal { name: "onUpdate" }
        Signal { name: "hasMpvEvents" }
        Signal { name: "initFinished" }
        Signal { name: "loaded" }
        Signal { name: "playing" }
        Signal { name: "paused" }
        Signal { name: "stopped" }
        Method {
            name: "open"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method { name: "play" }
        Method {
            name: "play"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method { name: "pause" }
        Method { name: "stop" }
        Method {
            name: "seek"
            Parameter { name: "value"; type: "qlonglong" }
            Parameter { name: "absolute"; type: "bool" }
            Parameter { name: "percent"; type: "bool" }
        }
        Method {
            name: "seek"
            Parameter { name: "value"; type: "qlonglong" }
            Parameter { name: "absolute"; type: "bool" }
        }
        Method {
            name: "seek"
            Parameter { name: "value"; type: "qlonglong" }
        }
        Method {
            name: "seekAbsolute"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method {
            name: "seekRelative"
            Parameter { name: "offset"; type: "qlonglong" }
        }
        Method {
            name: "seekPercent"
            Parameter { name: "percent"; type: "int" }
        }
        Method { name: "screenshot" }
        Method {
            name: "screenshotToFile"
            Parameter { name: "filePath"; type: "string" }
        }
    }
    Component {
        name: "QQuickFramebufferObject"
        defaultProperty: "data"
        prototype: "QQuickItem"
        Property { name: "textureFollowsItemSize"; type: "bool" }
        Property { name: "mirrorVertically"; type: "bool" }
        Signal {
            name: "textureFollowsItemSizeChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "mirrorVerticallyChanged"
            Parameter { type: "bool" }
        }
    }
}
